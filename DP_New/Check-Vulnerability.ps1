<#
.SYNOPSIS
  Check-Vulnerability.ps1

.DESCRIPTION
  Checks the Vulnerabilities of Data Protector
	
.INPUTS
  Configfile - config.json
  InputFile  - InputFile.csv
   
.NOTES
  Script:         Check-Vulnerability.ps1
  Author:         Chintalapudi Anand Vardhan  
  Requirements:   Powershell v3.0 , Posh-SSH Module
  Creation Date:  15-Dec-2021
  Modified Date:  15-Dec-2021 
  Remarks      :  

  .History:
        Version Date                       Author                    Description        
        1.0     15-Dec-2021      Chintalapudi Anand Vardhan        Initial Release

.EXAMPLE
  Script Usage 

  .\Check-Vulnerability.ps1 -ConfigFile .\config.json
#>


[CmdletBinding()]
param(
    [Parameter(Mandatory = $true)]
    [String] $ConfigFile = "config.json"
)

Function Get-Config
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [String]$ConfigFile # = "config.json"
    ) 
    try
    {
        if (Test-Path -Path $ConfigFile)
        {
            Write-Verbose "Parsing $ConfigFile"
            $config = Get-Content -Path $ConfigFile -Raw | ConvertFrom-Json
        }
    }
    catch
    {
        Write-Error "Error Parsing $ConfigFile" 
    }
    Write-Output $config
}

Function New-PoshSession
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [String]$IpAddress,
        [Parameter(Mandatory = $true)]
        [PSCredential]$Credential
    )
    try
    {
        $SessionId = New-SSHSession -ComputerName $IpAddress -Credential $Credential -AcceptKey:$true
        write-output $SessionId
    }
    catch
    {
        Write-Output $null
    }

}

Function Invoke-VulnerabilityCheckCommand_NonWin
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [int]$SshSessionId,
        [Parameter(Mandatory = $true)]
        [String]$logFile,
        [Parameter(Mandatory = $true)]
        [String]$command,
        [Switch] $UseSSHStream

    )
    try
    {
        '****************************' |  Out-File -FilePath $logFile -Append
        "Running Command : $command" |  Out-File -FilePath $logFile -Append
        '----------------------------' |  Out-File -FilePath $logFile -Append
        $result = ""
        $result = Invoke-SSHCommand -Command $command -SessionId $SshSessionId -EnsureConnection -TimeOut 300 
        $output = $result.output
        if ($result.error)
        {
         "Error Occured"  | Out-File -FilePath $logFile -Append  
         '============================' |  Out-File -FilePath $logFile -Append  
         $result.error | Out-File -FilePath $logFile -Append  
         '============================' |  Out-File -FilePath $logFile -Append  
        }
        $output | Out-File -FilePath $logFile -Append    
        '----------------------------'  | Out-File -FilePath $logFile -Append
        '****************************'  | Out-File -FilePath $logFile -Append
        Write-Output $output
    }
    catch
    {
        Write-Output $null
    }
}

function Invoke-VulnerabilityCheckCommand_Windows
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        $ComputerName,
        [Parameter(Mandatory = $true)]
        [String]$logFile,
        #[Parameter(Mandatory = $true)]
        [PSCredential]$Credential,
        [Parameter(Mandatory = $true)]
        [String]$command

    )
    try
    {
        '****************************' |  Out-File -FilePath $logFile -Append
        "Running Command : $command" |  Out-File -FilePath $logFile -Append
        '----------------------------' |  Out-File -FilePath $logFile -Append
        $Result = ""

        if($config.Backupserver -ne "LocalHost")
        {
            $Result = Invoke-Command -ComputerName $ComputerName -Credential $Credential -ScriptBlock {Invoke-Expression $using:Command}
        }
        else
        {
            $Result = Invoke-Expression $Command
        }
        $result | Out-File -FilePath $logFile -Append    
        '----------------------------'  | Out-File -FilePath $logFile -Append
        '****************************'  | Out-File -FilePath $logFile -Append
        Write-Output $result
    }
    catch
    {
        $comment = $_ | fl | Out-String
        Write-Log -Path $Activitylog -Type Exception -Entry $comment -ShowOnConsole
        Write-Output $null
    }
}

function Write-Log
{
    [CmdletBinding()]
    Param(
        [parameter(Mandatory = $true)] 
        [string] $Path,
        [parameter(Mandatory = $true)] 
        $Entry,
        [parameter(Mandatory = $true)]
        [ValidateSet('Error', 'Warning', 'Information', 'Exception')]
        [string] $Type,
        [switch]
        $ShowOnConsole,
        [switch]
        $OverWrite
    )
  
    if ($Type -eq "Error")
    {
        $logEntry = "[$(Get-Date -Format "dd-MMM-yyyy HH:mm:ss")] - [ERR]  - $Entry"
        if ($ShowOnConsole) { Write-Host "$Entry" -ForegroundColor Red}
    }
    elseif ($Type -eq "Warning")
    { 
        $logEntry = "[$(Get-Date -Format "dd-MMM-yyyy HH:mm:ss")] - [WARN] - $Entry"
        if ($ShowOnConsole) { Write-Host "$Entry" -ForegroundColor Yellow }
    }
    elseif ($Type -eq "Information")
    { 
        $logEntry = "[$(Get-Date -Format "dd-MMM-yyyy HH:mm:ss")] - [INFO] - $Entry"
        if ($ShowOnConsole) {  Write-Host "$Entry" -ForegroundColor Green }
    }
    elseif ($Type -eq "Exception")
    { 
        $logEntry = "[$(Get-Date -Format "dd-MMM-yyyy HH:mm:ss")] - [EXP]  - $Entry"
        if ($ShowOnConsole) {  Write-Host "$Entry" -ForegroundColor Red }
    }
    if($OverWrite)
    {
        $logEntry | Out-File $Path
    }
    else
    {
        $logEntry | Out-File $Path -Append
    }
}


$config = Get-Config -ConfigFile $ConfigFile
$culture = [CultureInfo]'en-us'
$Reportdate = ([system.datetime]::UtcNow).ToString("dd-MMM-yy HH:mm", $culture)
$date = ([system.datetime]::UtcNow).ToString("ddMMMyy_HHmm", $culture)
$Activitylog = "Activity.log"

if($config)
{
    if (!(Test-Path -Path $config.InputFile) )
    {
        Write-Log -Path $Activitylog -Entry "$($config.InputFile) not found!" -Type Information -ShowOnConsole
        exit
    }
    try
    {
        $InputFileData = Import-Csv -Path $ConfigFile.InputFile
    }
    catch
    {
        $comment = $_
        Write-Log -Path $Activitylog -Entry  "Invalid Input File!" -Type Error -ShowOnConsole
        Write-Log -Path $Activitylog -Entry  $comment -Type Exception 
        exit
    }
    $Servers = $InputFileData | where{$_}
    foreach($Server in $Servers)
    {
        $Backupdevice   = $Server.Servername
        $Ostype         = $Server.Ostype
        $CredentialPath = $Server.Credentialfilename
        Write-Log -Path $Activitylog -Entry "Checking Credential for $Backupdevice" -Type Information -ShowOnConsole
        if (!(Test-Path -Path $CredentialPath) )
        {
            $Credential = Get-Credential -Message "Enter Credentials"
            $Credential | Export-Clixml $CredentialPath -Force
        }
        try
        {
            $Credential = Import-Clixml $CredentialPath
        }
        catch
        {
            $comment = $_ | Format-List -Force 
            Write-Log -Path $Activitylog -Entry  "Invalid Credential File for $Backupdevice" -Type Error -ShowOnConsole
            Write-Log -Path $Activitylog -Entry  $comment -Type Exception 
            Write-Log -Path $Activitylog -Entry  "Recreate Credential File!" -Type Information -ShowOnConsole
            Break
        }
        Write-Log -Path $Activitylog -Entry "Connecting to $Backupdevice" -Type Information -ShowOnConsole

        if($Ostype -eq "Windows")
        {
            $ReortingserverStopCommand = $config.ReortingserverCommand_win
            $ReportingServerStopOutput = Invoke-VulnerabilityCheckCommand_Windows -ComputerName $BackupDevice -Credential $Credential -Command $ReortingserverStopCommand -logFile $Activitylog
            if(!($ReportingServerStopOutput))
            {
                exit
            }
            $TelemetryServiceStopCommand = $config.TelemetryServiceCommand_win
            $TelemetryServiceStopOutput  = Invoke-VulnerabilityCheckCommand_Windows -ComputerName $BackupDevice -Credential $Credential -Command $TelemetryServiceStopCommand -logFile $Activitylog
            
            $EnvironmentVariableCommand = "setx /m LOG4J_FORMAT_MSG_NO_LOOKUPS true"
            $EnvironmentVariableOutput  = Invoke-VulnerabilityCheckCommand_Windows -ComputerName $BackupDevice -Credential $Credential -Command $EnvironmentVariableCommand -logFile $Activitylog

            $TelemetryServiceStartCommand = $config.TelemetryServiceCommand_win -replace "Stop","Start"
            $TelemetryServiceStartOutput  = Invoke-VulnerabilityCheckCommand_Windows -ComputerName $BackupDevice -Credential $Credential -Command $TelemetryServiceStartCommand -logFile $Activitylog

            $ReortingserverStartCommand = $config.ReortingserverStopCommand_win -replace "Stop","Start"
            $ReortingserverStartOutput  = Invoke-VulnerabilityCheckCommand_Windows -ComputerName $BackupDevice -Credential $Credential -Command $ReortingserverStartCommand -logFile $Activitylog


        }
        else
        {
            Import-Module ".\Posh-SSH\Posh-SSH.psd1"
            $SshSession = New-PoshSession -IpAddress $BackupDevice -Credential  $Credential
            if($SshSession.Connected -eq "True")
            {
                if($Server.dp_sh_path)
                {
                    $Dp_sh_Path = $Server.dp_sh_path
                }
                else
                {
                    $Dp_sh_Path = "/etc/profile.d/dp.sh"
                }
                if($Ostype -eq "LX")
                {
                    $ReortingserverStopCommand    = $config.ReortingserverCommand_LX
                    $TelemetryServiceStopCommand  = $config.TelemetryServiceCommand_LX
                    $TelemetryServiceStartCommand = $config.TelemetryServiceCommand_LX -replace "Stop","Start"
                    $ReortingserverStartCommand   = $config.ReortingserverStopCommand_LX -replace "Stop","Start"
                }
                else
                {
                    $ReortingserverStopCommand    = $config.ReortingserverCommand_HPUX
                    $TelemetryServiceStopCommand  = $config.TelemetryServiceCommand_HPUX
                    $TelemetryServiceStartCommand = $config.TelemetryServiceCommand_HPUX -replace "Stop","Start"
                    $ReortingserverStartCommand   = $config.ReortingserverStopCommand_HPUX -replace "Stop","Start"
                }
                $ReportingServerStopOutput   = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $ReortingserverStopCommand
                if(!($ReportingServerStopOutput))
                {
                    exit
                }
                $TelemetryServiceStopOutput  = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $TelemetryServiceStopCommand
            
                $FileCheckingCommand = "[ -f $Dp_sh_Path ] && echo `"File exist`" || echo `"File does not exist`""
                if($FileCheckingCommand -eq "File does not exist")
                {
                    $WriteContentCommand = "echo `"export LOG4J_FORMAT_MSG_NO_LOOKUPS=true`" > $Dp_sh_Path"
                    $WriteContentOutput  = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $WriteContentCommand
                }
                else
                {
                    $Parent = ("$Dp_sh_Path" | Split-Path -Parent).Replace("\","/")
                    $Leaf   = ("$Dp_sh_Path" | Split-Path -Leaf) -replace "dp","dp_$(Get-Date -Format "ddMMyy")"
                    $Filename = $Parent + "/" + $Leaf
                    $RenameCommand = "mv $Dp_sh_Path $Filename"
                    $RenameOutput  = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $RenameCommand

                    $WriteContentCommand = "echo `"export LOG4J_FORMAT_MSG_NO_LOOKUPS=true`" > $Dp_sh_Path"
                    $WriteContentOutput  = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $WriteContentCommand
                }

                $EnvironmentVariableCommand = "export LOG4J_FORMAT_MSG_NO_LOOKUPS=true"
                $EnvironmentVariableOutput   = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $EnvironmentVariableCommand

                $TelemetryServiceStartOutput = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $TelemetryServiceStartCommand

                $ReortingserverStartOutput   = Invoke-VulnerabilityCheckCommand_NonWin -SshSessionId $SshSession.sessionId -logFile $Activitylog -command $ReortingserverStartCommand
            
            }
            else
            {
                Write-Log -Path $Activitylog -Entry "Failed to connect to $Backupdevice" -Type Error -ShowOnConsole 
            }

        }

    }
}
else
{
    Write-Log -Path $Activitylog -Entry "Invalid $ConfigFile" -Type Error -ShowOnConsole
}
Write-Log -Path $Activitylog -Entry "Completed" -Type Information -ShowOnConsole
